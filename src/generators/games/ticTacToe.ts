import { AiResponse } from '../../types';
import { ResponseGenerator, registerGenerator } from '../index';

const ticTacToeGenerator: ResponseGenerator = {
  name: 'ticTacToeGame',
  description: 'Creates a classic Tic Tac Toe game where two players alternate marking X or O on a 3x3 board.',
  
  detect: (input: string): boolean => {
    // Detection patterns for tic tac toe requests
    const keywords = ['tic tac toe', 'tic-tac-toe', 'tictactoe'];
    const actions = ['create', 'make', 'build', 'generate', 'develop'];
    
    // Check for direct mentions
    const directMatch = keywords.some(keyword =>
      input.toLowerCase().includes(keyword)
    );
    
    // Check for action + keyword combinations (e.g., "create tic tac toe game")
    const actionMatch = actions.some(action =>
      keywords.some(keyword =>
        input.toLowerCase().includes(`${action} ${keyword}`) ||
        input.toLowerCase().includes(`${action} a ${keyword}`)
      )
    );
    
    return directMatch || actionMatch;
  },
  
  generate: async (_message: string): Promise<AiResponse> => {
    return {
      actions: [
        {
          type: 'createFolder',
          path: 'tictactoe_game'
        },
        {
          type: 'createFile',
          path: 'tictactoe_game/index.html',
          content: `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Tic Tac Toe Game</title>
  <link rel="stylesheet" type="text/css" href="tictactoe.css"/>
</head>
<body>
  <div class="game-container">
    <h1>Tic Tac Toe</h1>
    <div class="board" id="board">
      <!-- 3x3 grid generated by JS or static squares -->
    </div>
    <div class="game-info">
      <p>Current Player: <span id="current-player">X</span></p>
      <p>Winner: <span id="winner">None</span></p>
    </div>
  </div>
  <script src="tictactoe.js"></script>
</body>
</html>`
        },
        {
          type: 'createFile',
          path: 'tictactoe_game/tictactoe.css',
          content: `body {
  background-color: #1a1a1a;
  color: #fff;
  margin: 0;
  font-family: Arial, sans-serif;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}

.game-container {
  text-align: center;
}

.board {
  display: grid;
  grid-template-columns: repeat(3, 100px);
  grid-gap: 5px;
  margin: 20px auto;
}

.square {
  width: 100px;
  height: 100px;
  background-color: #333;
  font-size: 36px;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
}

.square:hover {
  background-color: #444;
}

.game-info {
  margin-top: 15px;
}`
        },
        {
          type: 'createFile',
          path: 'tictactoe_game/tictactoe.js',
          content: `// Basic Tic Tac Toe logic

const boardElement = document.getElementById('board');
const currentPlayerElement = document.getElementById('current-player');
const winnerElement = document.getElementById('winner');

let currentPlayer = 'X';
let winner = null;
let board = Array(9).fill(null);

// Create 9 squares
for (let i = 0; i < 9; i++) {
  const square = document.createElement('div');
  square.classList.add('square');
  square.dataset.index = i;
  square.addEventListener('click', handleSquareClick);
  boardElement.appendChild(square);
}

function handleSquareClick(e) {
  const index = e.target.dataset.index;
  
  // If the square is already taken or there's a winner, ignore
  if (board[index] || winner) return;
  
  board[index] = currentPlayer;
  e.target.textContent = currentPlayer;
  
  if (checkWin()) {
    winner = currentPlayer;
    winnerElement.textContent = currentPlayer;
  } else if (board.every(cell => cell)) {
    winner = 'Draw';
    winnerElement.textContent = 'Draw';
  } else {
    currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
    currentPlayerElement.textContent = currentPlayer;
  }
}

function checkWin() {
  const winningPatterns = [
    [0,1,2], [3,4,5], [6,7,8], // rows
    [0,3,6], [1,4,7], [2,5,8], // cols
    [0,4,8], [2,4,6]           // diagonals
  ];
  
  return winningPatterns.some(pattern => {
    const [a, b, c] = pattern;
    return board[a] && board[a] === board[b] && board[a] === board[c];
  });
}

// Optional: Restart logic
function resetGame() {
  board = Array(9).fill(null);
  winner = null;
  currentPlayer = 'X';
  currentPlayerElement.textContent = currentPlayer;
  winnerElement.textContent = 'None';
  const squares = document.querySelectorAll('.square');
  squares.forEach(square => square.textContent = '');
}

console.log('[ticTacToe.js] Tic Tac Toe loaded successfully.');`
        }
      ],
      message: "Created a Tic Tac Toe game under 'tictactoe_game'. Enjoy the classic 3x3 experience!"
    };
  }
};

// Register the generator
registerGenerator(ticTacToeGenerator);

export default ticTacToeGenerator;
